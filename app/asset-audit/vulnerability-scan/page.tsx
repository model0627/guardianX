'use client';

import { useState, useEffect } from 'react';
import { 
  Play,
  Pause,
  RotateCcw,
  Download,
  Filter,
  Search,
  AlertTriangle,
  AlertCircle,
  Info,
  CheckCircle,
  Clock,
  Target,
  Server,
  Database,
  Laptop,
  Router,
  Shield,
  Activity,
  FileText,
  Eye,
  Settings
} from 'lucide-react';

interface VulnerabilityItem {
  id: string;
  title: string;
  severity: 'critical' | 'high' | 'medium' | 'low';
  cve: string;
  asset: string;
  assetType: string;
  description: string;
  status: 'new' | 'in_progress' | 'resolved' | 'false_positive';
  discoveredDate: string;
  lastSeen: string;
  risk_score: number;
}

interface ScanStatus {
  isRunning: boolean;
  progress: number;
  currentAsset: string;
  totalAssets: number;
  scannedAssets: number;
  startTime: string;
  estimatedCompletion: string;
}

export default function VulnerabilityScanPage() {
  const [vulnerabilities, setVulnerabilities] = useState<VulnerabilityItem[]>([]);
  const [filteredVulnerabilities, setFilteredVulnerabilities] = useState<VulnerabilityItem[]>([]);
  const [scanStatus, setScanStatus] = useState<ScanStatus | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [severityFilter, setSeverityFilter] = useState<string>('all');
  const [statusFilter, setStatusFilter] = useState<string>('all');
  const [selectedVuln, setSelectedVuln] = useState<VulnerabilityItem | null>(null);

  useEffect(() => {
    document.title = '취약점 스캔 - GuardianX';
    loadVulnerabilities();
  }, []);

  useEffect(() => {
    filterVulnerabilities();
  }, [vulnerabilities, searchTerm, severityFilter, statusFilter]);

  const loadVulnerabilities = async () => {
    // 샘플 취약점 데이터
    const sampleVulns: VulnerabilityItem[] = [
      {
        id: 'vuln-001',
        title: 'Apache HTTP Server 2.4.x Remote Code Execution',
        severity: 'critical',
        cve: 'CVE-2024-1234',
        asset: 'WEB-SERVER-01',
        assetType: 'server',
        description: 'Apache HTTP Server contains a buffer overflow vulnerability that allows remote code execution.',
        status: 'new',
        discoveredDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),
        lastSeen: new Date().toISOString(),
        risk_score: 9.8
      },
      {
        id: 'vuln-002',
        title: 'Microsoft Windows SMB Protocol Vulnerability',
        severity: 'high',
        cve: 'CVE-2024-5678',
        asset: 'FILE-SERVER-02',
        assetType: 'server',
        description: 'Windows SMB protocol contains a vulnerability that could allow privilege escalation.',
        status: 'in_progress',
        discoveredDate: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),
        lastSeen: new Date().toISOString(),
        risk_score: 7.5
      },
      {
        id: 'vuln-003',
        title: 'MySQL Database Server Information Disclosure',
        severity: 'medium',
        cve: 'CVE-2024-9012',
        asset: 'DB-SERVER-01',
        assetType: 'database',
        description: 'MySQL server may disclose sensitive information through error messages.',
        status: 'resolved',
        discoveredDate: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000).toISOString(),
        lastSeen: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),
        risk_score: 5.2
      },
      {
        id: 'vuln-004',
        title: 'Cisco Router Configuration Weakness',
        severity: 'low',
        cve: 'CVE-2024-3456',
        asset: 'ROUTER-CORE-01',
        assetType: 'network',
        description: 'Router configuration allows weak authentication protocols.',
        status: 'false_positive',
        discoveredDate: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000).toISOString(),
        lastSeen: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),
        risk_score: 3.1
      },
      {
        id: 'vuln-005',
        title: 'Chrome Browser Security Update Required',
        severity: 'high',
        cve: 'CVE-2024-7890',
        asset: 'WORKSTATION-15',
        assetType: 'workstation',
        description: 'Chrome browser version contains multiple security vulnerabilities.',
        status: 'new',
        discoveredDate: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),
        lastSeen: new Date().toISOString(),
        risk_score: 8.2
      }
    ];

    setVulnerabilities(sampleVulns);
  };

  const filterVulnerabilities = () => {
    let filtered = vulnerabilities;

    if (searchTerm) {
      filtered = filtered.filter(vuln => 
        vuln.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        vuln.cve.toLowerCase().includes(searchTerm.toLowerCase()) ||
        vuln.asset.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    if (severityFilter !== 'all') {
      filtered = filtered.filter(vuln => vuln.severity === severityFilter);
    }

    if (statusFilter !== 'all') {
      filtered = filtered.filter(vuln => vuln.status === statusFilter);
    }

    setFilteredVulnerabilities(filtered);
  };

  const startScan = () => {
    setScanStatus({
      isRunning: true,
      progress: 0,
      currentAsset: 'WEB-SERVER-01',
      totalAssets: 156,
      scannedAssets: 0,
      startTime: new Date().toISOString(),
      estimatedCompletion: new Date(Date.now() + 30 * 60 * 1000).toISOString()
    });

    // 스캔 진행 시뮬레이션
    const interval = setInterval(() => {
      setScanStatus(prev => {
        if (!prev || prev.progress >= 100) {
          clearInterval(interval);
          return null;
        }
        
        const newProgress = Math.min(prev.progress + Math.random() * 10, 100);
        const newScanned = Math.floor((newProgress / 100) * prev.totalAssets);
        
        return {
          ...prev,
          progress: newProgress,
          scannedAssets: newScanned,
          currentAsset: `SERVER-${Math.floor(Math.random() * 50 + 1).toString().padStart(2, '0')}`
        };
      });
    }, 1000);
  };

  const stopScan = () => {
    setScanStatus(null);
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'text-red-600 bg-red-50 border-red-200';
      case 'high': return 'text-orange-600 bg-orange-50 border-orange-200';
      case 'medium': return 'text-yellow-600 bg-yellow-50 border-yellow-200';
      case 'low': return 'text-blue-600 bg-blue-50 border-blue-200';
      default: return 'text-gray-600 bg-gray-50 border-gray-200';
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'critical': return AlertTriangle;
      case 'high': return AlertCircle;
      case 'medium': return Info;
      case 'low': return CheckCircle;
      default: return Info;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'new': return 'text-red-600 bg-red-50';
      case 'in_progress': return 'text-yellow-600 bg-yellow-50';
      case 'resolved': return 'text-green-600 bg-green-50';
      case 'false_positive': return 'text-gray-600 bg-gray-50';
      default: return 'text-gray-600 bg-gray-50';
    }
  };

  const getAssetIcon = (assetType: string) => {
    switch (assetType) {
      case 'server': return Server;
      case 'database': return Database;
      case 'workstation': return Laptop;
      case 'network': return Router;
      default: return Server;
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'new': return '신규';
      case 'in_progress': return '진행중';
      case 'resolved': return '해결됨';
      case 'false_positive': return '오탐';
      default: return status;
    }
  };

  return (
    <div className="p-6 space-y-6 bg-gray-50 min-h-full">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">취약점 스캔</h2>
          <p className="text-gray-600 mt-1">시스템 취약점을 스캔하고 관리합니다</p>
        </div>
        <div className="flex items-center gap-3">
          {scanStatus ? (
            <button
              onClick={stopScan}
              className="flex items-center gap-2 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700"
            >
              <Pause className="w-4 h-4" />
              스캔 중지
            </button>
          ) : (
            <button
              onClick={startScan}
              className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
            >
              <Play className="w-4 h-4" />
              스캔 시작
            </button>
          )}
          <button className="flex items-center gap-2 px-4 py-2 bg-white border border-gray-300 rounded-lg hover:bg-gray-50">
            <Download className="w-4 h-4" />
            보고서 다운로드
          </button>
        </div>
      </div>

      {/* Scan Status */}
      {scanStatus && (
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold text-gray-900">스캔 진행 상황</h3>
            <span className="text-sm text-gray-500">
              {scanStatus.scannedAssets} / {scanStatus.totalAssets} 자산 완료
            </span>
          </div>
          
          <div className="space-y-4">
            <div>
              <div className="flex justify-between text-sm mb-2">
                <span className="text-gray-600">진행률</span>
                <span className="font-medium">{Math.round(scanStatus.progress)}%</span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div 
                  className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                  style={{ width: `${scanStatus.progress}%` }}
                ></div>
              </div>
            </div>
            
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
              <div>
                <span className="text-gray-600">현재 스캔 중:</span>
                <p className="font-medium">{scanStatus.currentAsset}</p>
              </div>
              <div>
                <span className="text-gray-600">시작 시간:</span>
                <p className="font-medium">{new Date(scanStatus.startTime).toLocaleTimeString('ko-KR')}</p>
              </div>
              <div>
                <span className="text-gray-600">예상 완료:</span>
                <p className="font-medium">{new Date(scanStatus.estimatedCompletion).toLocaleTimeString('ko-KR')}</p>
              </div>
              <div className="flex items-center gap-2">
                <Activity className="w-4 h-4 text-green-500 animate-pulse" />
                <span className="text-green-600 font-medium">실행 중</span>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Filters */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
        <div className="flex items-center gap-4">
          <div className="flex-1 relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
            <input
              type="text"
              placeholder="취약점, CVE, 자산명으로 검색..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          
          <select
            value={severityFilter}
            onChange={(e) => setSeverityFilter(e.target.value)}
            className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
          >
            <option value="all">모든 심각도</option>
            <option value="critical">Critical</option>
            <option value="high">High</option>
            <option value="medium">Medium</option>
            <option value="low">Low</option>
          </select>
          
          <select
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
            className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
          >
            <option value="all">모든 상태</option>
            <option value="new">신규</option>
            <option value="in_progress">진행중</option>
            <option value="resolved">해결됨</option>
            <option value="false_positive">오탐</option>
          </select>
        </div>
      </div>

      {/* Vulnerabilities List */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200">
        <div className="p-6 border-b border-gray-200">
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-semibold text-gray-900">
              발견된 취약점 ({filteredVulnerabilities.length})
            </h3>
            <div className="flex items-center gap-2 text-sm text-gray-500">
              <Clock className="w-4 h-4" />
              마지막 스캔: {new Date().toLocaleString('ko-KR')}
            </div>
          </div>
        </div>
        
        <div className="divide-y divide-gray-200">
          {filteredVulnerabilities.map((vuln) => {
            const SeverityIcon = getSeverityIcon(vuln.severity);
            const AssetIcon = getAssetIcon(vuln.assetType);
            
            return (
              <div
                key={vuln.id}
                onClick={() => setSelectedVuln(vuln)}
                className="p-6 hover:bg-gray-50 cursor-pointer transition-colors"
              >
                <div className="flex items-start gap-4">
                  <div className="flex-shrink-0">
                    <SeverityIcon className={`w-5 h-5 ${
                      vuln.severity === 'critical' ? 'text-red-500' :
                      vuln.severity === 'high' ? 'text-orange-500' :
                      vuln.severity === 'medium' ? 'text-yellow-500' : 'text-blue-500'
                    }`} />
                  </div>
                  
                  <div className="flex-1 min-w-0">
                    <div className="flex items-center gap-3 mb-2">
                      <h4 className="font-semibold text-gray-900 truncate">{vuln.title}</h4>
                      <span className={`px-2 py-1 text-xs rounded-full border ${getSeverityColor(vuln.severity)}`}>
                        {vuln.severity.toUpperCase()}
                      </span>
                      <span className={`px-2 py-1 text-xs rounded-full ${getStatusColor(vuln.status)}`}>
                        {getStatusText(vuln.status)}
                      </span>
                    </div>
                    
                    <p className="text-gray-600 text-sm mb-3">{vuln.description}</p>
                    
                    <div className="flex items-center gap-6 text-xs text-gray-500">
                      <div className="flex items-center gap-1">
                        <span className="font-medium text-gray-900">{vuln.cve}</span>
                      </div>
                      <div className="flex items-center gap-1">
                        <AssetIcon className="w-3 h-3" />
                        <span>{vuln.asset}</span>
                      </div>
                      <div className="flex items-center gap-1">
                        <Target className="w-3 h-3" />
                        <span>위험도: {vuln.risk_score}/10</span>
                      </div>
                      <div className="flex items-center gap-1">
                        <Clock className="w-3 h-3" />
                        <span>발견: {new Date(vuln.discoveredDate).toLocaleDateString('ko-KR')}</span>
                      </div>
                    </div>
                  </div>
                  
                  <div className="flex-shrink-0">
                    <button className="text-blue-600 hover:text-blue-800 text-sm font-medium">
                      상세보기
                    </button>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      </div>

      {/* Vulnerability Detail Modal */}
      {selectedVuln && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4 max-h-[80vh] overflow-auto">
            <div className="p-6 border-b border-gray-200">
              <div className="flex items-center justify-between">
                <h3 className="text-lg font-semibold text-gray-900">취약점 상세 정보</h3>
                <button
                  onClick={() => setSelectedVuln(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <X className="w-5 h-5" />
                </button>
              </div>
            </div>
            
            <div className="p-6 space-y-4">
              <div>
                <h4 className="font-medium text-gray-900 mb-2">{selectedVuln.title}</h4>
                <p className="text-gray-600 text-sm">{selectedVuln.description}</p>
              </div>
              
              <div className="grid grid-cols-2 gap-4 text-sm">
                <div>
                  <span className="font-medium text-gray-900">CVE ID:</span>
                  <p className="text-gray-600">{selectedVuln.cve}</p>
                </div>
                <div>
                  <span className="font-medium text-gray-900">위험도:</span>
                  <p className="text-gray-600">{selectedVuln.risk_score}/10</p>
                </div>
                <div>
                  <span className="font-medium text-gray-900">영향받는 자산:</span>
                  <p className="text-gray-600">{selectedVuln.asset}</p>
                </div>
                <div>
                  <span className="font-medium text-gray-900">자산 유형:</span>
                  <p className="text-gray-600">{selectedVuln.assetType}</p>
                </div>
                <div>
                  <span className="font-medium text-gray-900">발견 날짜:</span>
                  <p className="text-gray-600">{new Date(selectedVuln.discoveredDate).toLocaleDateString('ko-KR')}</p>
                </div>
                <div>
                  <span className="font-medium text-gray-900">마지막 확인:</span>
                  <p className="text-gray-600">{new Date(selectedVuln.lastSeen).toLocaleDateString('ko-KR')}</p>
                </div>
              </div>
              
              <div className="flex items-center gap-3 pt-4">
                <button className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
                  <Settings className="w-4 h-4" />
                  수정 계획 생성
                </button>
                <button className="flex items-center gap-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700">
                  <CheckCircle className="w-4 h-4" />
                  해결 완료 표시
                </button>
                <button className="flex items-center gap-2 px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700">
                  <Eye className="w-4 h-4" />
                  오탐으로 표시
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}